#include <iostream>
#include <sstream>
#include <fstream>
#include "q1mergesort.h"
#include <cstdlib>
using namespace std;

unsigned int uDefaultStackSize(){
		return 512*1000;
}

void usage(char *argv[]){
	cerr<< "Usage: " << argv[0];
	cerr<<" ( -s unsorted-file [ sorted-file ] | -t size (>= 0) [ depth (>= 0) ] )" <<endl;
	exit(EXIT_FAILURE);
}

void uMain::main(){


	istream *infile = &cin;
	ostream *outfile = &cout;	
	int size = 0;
	int depth = 0;

	if(argc <= 2){
		usage(argv);
	}
	string ar = argv[1];
	//cout<<"argv[1] length "<<ar<<endl;
	//cout<<"argc "<<argc<<endl;
	//cout<<"argv[2] "<<argv[2]<<endl;
	if(ar == "-s"){
		//cout<<"get"<<endl;
		switch (argc) {
			case 3:
				try{
					infile = new ifstream(argv[2]);
				} catch(uFile::Failure){
					usage(argv);
				}
				break;
			case 4:
				try{
					//cout<<"enter try1"<<endl;
					infile = new ifstream(argv[2]);
				} catch(uFile::Failure){
					//cout<<"catch1"<<endl;
					usage(argv);
				}
				
				try{
					//cout<<"enter try2"<<endl;
					outfile = new ofstream(argv[3]);
				} catch(uFile::Failure){
					//cout<<"catch2"<<endl;
					usage(argv);
				}
				break;
			default:
				//cout<<"default"<<endl;
				usage(argv);
		}
			
	}
	else if(ar == "-t"){
		if(argc != 3 && argc !=4){
			usage(argv);
		}
		size = atoi(argv[2]);

		if(size < 0){
		  usage(argv);
		}

		if(argc == 4){
		  depth = atoi(argv[3]);
		}
		
		if(depth < 0){
		  usage(argv);
		}
	}

	else{
		usage(argv);	
	}
	//cout<<"depth: "<<endl;
	uProcessor p[(1<<depth) - 1] __attribute__ ((unused));
	
				//from here
	if(ar == "-t"){
	  int *unsort1 = new int[size];
	  for(int i=0; i<size; i++){
	    unsort1[i] = size-i;
	  }
	  
	  //int unsort1[] = {4,3,2,1};
	  {Mergesort<TYPE> mergetime(unsort1, 0, size-1, depth);}
	  delete unsort1;
	  return;
	}
	//cout<<"gethere"<<endl;
	string in;
	
	for(;;){
	//	cout<<"im live"<<endl;
		*infile>>in;
		if(infile->fail()) break;
		
		istringstream iss1(in);
	//	cout<<"get here"<<endl;
		int len;
		iss1 >> len;
		if(len == 0){
			*outfile<<endl<<endl<<endl;
			continue;
		}
		int *unsort = new int[len];
		for(int i=0; i<len; i++){
			*infile>>in;
			if(infile->fail()) {
				cerr<<"expect have "<<len<<" numbers, but only have "<<i-1<<endl;
				exit(EXIT_FAILURE);
			}
			istringstream iss2(in);
			int number;
			iss2>>number; 
			unsort[i] = number;
		}
		
		for(int k=0; k<len; k++){
			if(k%22 == 0 && k != 0){
				*outfile<<endl<<"  ";
			}
			*outfile<<unsort[k]<<" ";
		}
		*outfile<<endl;

		{Mergesort<TYPE> me(unsort, 0, len-1, depth);}
		
		for(int i=0; i<len; i++){
			if(i%22 == 0 && i != 0){
				*outfile<<endl<<"  ";
			}
			*outfile<<unsort[i]<<" ";
		}
		*outfile<<endl<<endl;

		delete unsort;	
	}

	
	if(infile != &cin) delete infile;
	if(outfile != &cout) delete outfile;
	
	return;






}
